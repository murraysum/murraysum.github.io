<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Murray Summers</title>
  <subtitle>Blog</subtitle>
  <id>http://www.murraysum.com/blog</id>
  <link href="http://www.murraysum.com/blog"/>
  <link href="http://www.murraysum.com/blog/feed.xml" rel="self"/>
  <updated>2017-07-26T15:07:00+01:00</updated>
  <author>
    <name>Murray Summers</name>
  </author>
  <entry>
    <title>Rake up routes in Rails</title>
    <link rel="alternate" href="http://www.murraysum.com/blog/2017/07/26/rake-up-routes-in-rails/"/>
    <id>http://www.murraysum.com/blog/2017/07/26/rake-up-routes-in-rails/</id>
    <published>2017-07-26T15:07:00+01:00</published>
    <updated>2017-11-14T20:01:46+00:00</updated>
    <author>
      <name>Murray Summers</name>
    </author>
    <content type="html">&lt;p&gt;
  As a Ruby on Rails application grows it can be difficult to keep track
  which routes map to which controller and action. Rails attempts to combat
  this by relying on convention over configuration. This helps to reduce the
  cognitive load on an engineer. But a convention is just a convention.
&lt;/p&gt;

&lt;p&gt;
  What happens when the convention isn't followed? How do you quickly
  find which route maps to a controller action? Luckily Rails has the answer.
&lt;/p&gt;

&lt;p&gt;
  In Rails there is a Rake task that lists all of the routes. For each route it
  specifies the route helper, the HTTP verb and the controller action:
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake routes
               Prefix Verb   URI Pattern                              Controller#Action
       user_bookmarks POST   /users/:user_id/bookmarks&lt;span class="o"&gt;(&lt;/span&gt;.:format&lt;span class="o"&gt;)&lt;/span&gt;      bookmarks#create
   new_user_bookmarks GET    /users/:user_id/bookmarks/new&lt;span class="o"&gt;(&lt;/span&gt;.:format&lt;span class="o"&gt;)&lt;/span&gt;  bookmarks#new
  edit_user_bookmarks GET    /users/:user_id/bookmarks/edit&lt;span class="o"&gt;(&lt;/span&gt;.:format&lt;span class="o"&gt;)&lt;/span&gt; bookmarks#edit
                      GET    /users/:user_id/bookmarks&lt;span class="o"&gt;(&lt;/span&gt;.:format&lt;span class="o"&gt;)&lt;/span&gt;      bookmarks#show
                      PUT    /users/:user_id/bookmarks&lt;span class="o"&gt;(&lt;/span&gt;.:format&lt;span class="o"&gt;)&lt;/span&gt;      bookmarks#update
                      DELETE /users/:user_id/bookmarks&lt;span class="o"&gt;(&lt;/span&gt;.:format&lt;span class="o"&gt;)&lt;/span&gt;      bookmarks#destroy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Having all of this information in one place makes it trivial to trace requests
  in your application. The next time you need to find a route rake it up in Rails.
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to test a Middleman static site</title>
    <link rel="alternate" href="http://www.murraysum.com/blog/2017/05/21/how-to-test-a-middleman-static-site/"/>
    <id>http://www.murraysum.com/blog/2017/05/21/how-to-test-a-middleman-static-site/</id>
    <published>2017-05-21T15:07:00+01:00</published>
    <updated>2017-07-26T22:18:54+01:00</updated>
    <author>
      <name>Murray Summers</name>
    </author>
    <content type="html">&lt;p&gt;
  One of the many advantages of static sites is the simplicity to setup, configure
  and maintain. The majority of static sites aren't huge. Some are simple blogs,
  others are project sites and some small to medium marketing sites.
  However, you would be mistaken to think just because it is a static site it doesn't
  require an automated test suite.
&lt;/p&gt;

&lt;p&gt;
  Imagine the scenario of a small marketing site for a product. It has a homepage,
  some information on pricing and set of feature pages. Most importantly its sole
  purpose is to convince users that your product is great. The static site's purpose is to acquire those users.
  So why would you not treat your static site as a first class citizen and give it
  the love and care you would for your main product? That means having tests
  to cover the workflows that a user might go through before signing up for your product.
&lt;/p&gt;

&lt;p&gt;
  To setup an automated test suite in &lt;a href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt; first &lt;a href="https://middlemanapp.com/basics/start-new-site/"&gt;create a new Middleman static site&lt;/a&gt;
  or open your existing site in your editor of choice. As part of our test suite we will be using
  &lt;a href="http://rspec.info/"&gt;RSpec&lt;/a&gt; and &lt;a href="http://teamcapybara.github.io/capybara/"&gt;Capybara&lt;/a&gt;.
  To install these as dependencies, open up the &lt;code&gt;Gemfile&lt;/code&gt; and
  add the following:
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"rspec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 3.4"&lt;/span&gt;
    &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"capybara"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 2.5"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Then run bundler:
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  We can now setup the configuration for RSpec and Capybara. Create the
  required directories and files:
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p spec/features &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch spec/spec_helper.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  This will have created a new directory called &lt;code&gt;spec/features&lt;/code&gt; where all of our tests
  will live. This will have also created a file called &lt;code&gt;spec_helper.rb&lt;/code&gt; where all of
  our test configuration will live.
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;  spec
  ├── features
  └── spec_helper.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Let's now setup the test configuration. Open up &lt;code&gt;spec_helper.rb&lt;/code&gt; and add the following:
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"rspec"&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"capybara/rspec"&lt;/span&gt;

  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"middleman-core"&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"middleman-core/rack"&lt;/span&gt;

  &lt;span class="n"&gt;middleman_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Middleman&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Middleman&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;middleman_app&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_app&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;".."&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;
    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:show_exceptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Now that we have our spec configuration setup we can add our first spec.
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;touch spec/features/index_spec.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Within our &lt;code&gt;index_spec.rb&lt;/code&gt; we can add some simple tests:
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"spec_helper"&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"index page"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :feature&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"responds successfully"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"has a title"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Welcome to Middleman"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"has a heading"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"h1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;text: &lt;/span&gt;&lt;span class="s2"&gt;"Middleman is Running"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  The first test checks that when we visit the page hosted at &lt;code&gt;/&lt;/code&gt; then we will
  receive HTTP status code of 200. The second test checks that the page title is set
  to "Welcome to Middleman". Finally, the third test checks
  there is a heading element with the text "Middleman is Running".
&lt;/p&gt;

&lt;p&gt;
  We can now run the test suite:
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rspec spec
  ...

  Finished &lt;span class="k"&gt;in &lt;/span&gt;0.02679 seconds &lt;span class="o"&gt;(&lt;/span&gt;files took 1.29 seconds to load&lt;span class="o"&gt;)&lt;/span&gt;
  3 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Look at those sweet, sweet dots. A developer's best friend, a passing test suite.
&lt;/p&gt;

&lt;p&gt;
  These are quite simple tests but it is not hard to imagine having tests that
  click throughout your static site, checking those all important workflows. So go out
  there and test your limits by choosing to add a test suite for your static
  site.
&lt;/p&gt;

&lt;p&gt;
  Thank you to Simon Rice for &lt;a href="https://github.com/simonrice/middleman-rspec"&gt;originally coming up with this approach&lt;/a&gt;.
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Estimating article reading times with Middleman</title>
    <link rel="alternate" href="http://www.murraysum.com/blog/2017/02/23/estimating-article-reading-times-with-middleman/"/>
    <id>http://www.murraysum.com/blog/2017/02/23/estimating-article-reading-times-with-middleman/</id>
    <published>2017-02-23T14:07:00+00:00</published>
    <updated>2017-11-14T20:01:46+00:00</updated>
    <author>
      <name>Murray Summers</name>
    </author>
    <content type="html">&lt;p&gt;
  At the top of every &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt; article there is an estimated reading time
  allowing users to decide whether to read an article now, later or not at all. How can we provide estimates for articles generated using &lt;a href="https://middlemanapp.com"&gt;Middleman&lt;/a&gt;?

&lt;/p&gt;

&lt;img src="/images/blog/estimating-article-reading-times-with-middleman/medium-estimated-reading-times.png" alt="Medium article showing estimated reading time" class="article_image" /&gt;

&lt;p&gt;
  Before we get started adding estimated reading times we will assume that you
  have already &lt;a href="https://middlemanapp.com/basics/start_new_site/"&gt;created a Middleman site&lt;/a&gt;
  and &lt;a href="https://middlemanapp.com/basics/blogging/"&gt;installed the middleman-blog extension&lt;/a&gt;.
  Unfortunately, the middleman-blog extension doesn't provide any support for
  reading times. However, luckily there are a number of libraries that can
  calculate reading times such as &lt;a href="https://github.com/garethrees/readingtime"&gt;readingtime&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  The &lt;a href="https://github.com/garethrees/readingtime"&gt;readingtime&lt;/a&gt;
  library calculates a reading time given some text and the number of words
  that can be read in a given amount of time.
&lt;/p&gt;

&lt;p&gt;
  To get started let's add the readingtime gem to our Gemfile:
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"readingtime"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Once this line is added we can install the dependency using bundler:
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;  bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  This will have installed the dependency for our middleman site. Before we can
  use the gem in our article layout we first need to make it available to our
  middleman site by adding &lt;code&gt;require "readingtime"&lt;/code&gt; to our
  &lt;code&gt;config.rb&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
  We are now able to calculate the reading times for each blog article. Each blog
  typically has an &lt;code&gt;index.html.erb&lt;/code&gt; page where links to all of the articles
  appear. By default the middleman-blog extension generates one if you have run
  one of:
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;  middleman init MY_BLOG_PROJECT --template&lt;span class="o"&gt;=&lt;/span&gt;blog
  middleman init --template&lt;span class="o"&gt;=&lt;/span&gt;blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  In any case you should have an &lt;code&gt;index.html.erb&lt;/code&gt; page looking something similar
  to this:
&lt;/p&gt;

&lt;pre class="highlight erb"&gt;&lt;code&gt;  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;page_articles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%b %e'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Here we are looping around each blog article and rendering a link to the
  article, the date the article was posted and finally the article's body
  content. To render reading times we can add the following inside the loop:
&lt;/p&gt;

&lt;pre class="highlight erb"&gt;&lt;code&gt;  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reading_time&lt;/span&gt; &lt;span class="ss"&gt;:format&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:approx&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Here we are calling &lt;code&gt;reading_time&lt;/code&gt; on the article's body content and specifying
  how the time should be formatted. The readingtime gem supports a variety
  &lt;a href="https://github.com/garethrees/readingtime#options"&gt;different formatting options&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  You may have realised that if the article's body content contained HTML then
  this would be counted towards our reading time and would make our estimate
  less accurate. This is true, however this is
  unlikely to shift the reading time significantly.
&lt;/p&gt;
</content>
  </entry>
</feed>
